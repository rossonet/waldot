buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.1"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:11.9.1'
        classpath 'de.undercouch:gradle-download-task:5.6.0'
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
        classpath "com.palantir.gradle.docker:gradle-docker:0.36.0"
    }
}

description = "WaldOT plugin TinkerPop legacy connector"
group = 'net.rossonet.waldot'
version = '0.1.1'

ext {
    sourceCompatibility = 21
    targetCompatibility = 21
    ossrhPassword = System.getenv('OSSRH_PASSWORD')
    ossrhUsername = System.getenv('OSSRH_USERNAME')
}

repositories {
    mavenCentral()
    maven {
       url "https://repo.craftyn.com/repository/snapshots/" 
    }
    maven { url 'https://jitpack.io' }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'jacoco'
apply plugin: "com.netflix.nebula.ospackage"
apply plugin: 'base'
apply plugin: 'distribution'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'

dependencies {
    api project(':waldot-api')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testImplementation group: 'com.ginsberg', name: 'junit5-system-exit', version: '2.0.0'
    testImplementation group: 'com.google.inject', name: 'guice', version: '7.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'
}

task eclipseClosedDependencies {}

task eclipseClosedDependencies_ {}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll(['-XprintProcessorInfo'])
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

task view { doLast { println "Working on project ${project.name} [ ${project.description} ]" } }

jar {
    enabled = true
}

jar.doLast { task ->
	ant.checksum file: task.archivePath
}

java {
    withJavadocJar()
    withSourcesJar()
}

gitProperties {
    failOnNoGitDirectory = false
    customProperty 'component', "${project.name}"
    dateFormat = "yyyy-MM-dd HH:mm:ssZ"
    dateFormatTimeZone = 'GMT'
}

test {
    useJUnitPlatform()
}

javadoc{
    destinationDir = file("${project.buildDir}/docs/javadoc/${project.name}/")
    failOnError=false
}

uploadArchives {
  repositories {
    mavenDeployer {

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name "${project.name}"
        packaging 'jar'
        description "${project.description}"
        url 'https://www.rossonet.net/'
		licenses {
		    license {
			name = 'Apache-2.0 license'
			url = 'https://www.apache.org/licenses/LICENSE-2.0'
		    }
		}
		developers {
		    developer {
			id = 'ar4k'
			name = 'Andrea Ambrosini'
			email = 'andrea.ambrosini@rossonet.com'
		    }
		}
		scm {
		    connection = 'scm:git:git://github.com/rossonet/waldot.git'
		    developerConnection = 'scm:git:ssh://github.com:rossonet/waldot.git'
		    url = 'https://github.com/rossonet/waldot/tree/master'
		}
      }
    }
  }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

signing {
    sign publishing.publications.mavenJava
}
